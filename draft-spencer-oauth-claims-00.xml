<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">

<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc tocindent="yes"?>
<?rfc tocompact="yes"?>

<rfc ipr="trust200902" category="std" docName="draft-spencer-oauth-claims-00">
    <front>
        <title abbrev="Claims">The OAuth 2.0 Authorization Framework: Claims</title>

        <author fullname="Travis Spencer" initials="T." surname="Spencer">
            <organization>Curity AB</organization>

            <address>
                <email>travis@curity.io</email>
            </address>
        </author>

        <date day="4" month="November" year="2019"/>

        <area>Security</area>
        <workgroup>OAuth Working Group</workgroup>

        <keyword>RFC</keyword>
        <keyword>Request for Comments</keyword>
        <keyword>JSON</keyword>
        <keyword>Claim</keyword>
        <keyword>Assertion</keyword>
        <keyword>OAuth</keyword>

        <abstract>
            <t>
                This document extends the OAuth 2.0 framework to include a
                simple query language that can be used by clients to request
                certain claims from an authorization server. This mechanism can
                be used during the authorization request and refresh request. It
                also defines a response parameter of the token and introspection
                endpoints that indicates to the caller which claims were
                authorized by the resource owner. Lastly, it stipulates how this
                request parameter can be used during token exchange, and how
                clients may request that certain claims be placed in an access
                token intended for a particular resource server.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction" anchor="introduction">
            <t>
                As stated in Section 1.4 of <xref target="RFC6749"/>, an
                access token represents the specific scope and duration of
                access. The requested scope is verified by the authorization
                server according to its policy, and the perhaps-different scope
                is granted by the resource owner. The requested and granted
                scope may vary due to the authorization server's policy and/or
                the resource owner's limitation of the granted scope. The
                resulting scope is enforced by the resource server. The way in
                which the client indicates the intended scope of access is by
                the <spanx style="verb">scope</spanx> request parameter defined
                in Section 3.3 of <xref target="RFC6749"/>. This specification
                defines a more sophisticated instrument to achieve this same
                purpose.
            </t>

            <t>
                At times, this existing mechanism is too limited. In some uses
                cases, for example, a client may need to request particular
                claims from an authorization server. It may also do this to
                request specific claim values. Furthermore, a client may need
                to indicate to the authorization server that certain claims are
                essential for its ability to operate. In such cases, the grant
                is of little use to the client if the resource owner does not
                comply. Another example of when the existing
                <spanx style="verb">scope</spanx> parameter is insufficient is
                when the client knows that some claim is required by a
                particular resource server. The extent of a client's knowledge
                is usually limited to knowing that a claim is needed in an
                access token; however, in some cases, it may also know that a
                claim should be restricted to access tokens issued to a
                particular resource server. In these situations, the existing
                mechanism for stipulating the scope of access is insufficient.
            </t>

            <t>
                To accommodate these use cases and requirements, this
                specification defines a new request parameter that can be used
                when the client obtains an authorization grant, as described in
                Section 1.3 of <xref target="RFC6749"/> and Section 2.1 of
                <xref target="I-D.ietf-oauth-token-exchange"/>. For each request
                wherein these fix grant types -- authorization code, implicit,
                resource owner password credentials, client credentials, and
                token exchange -- are sought, this specification defines a new
                parameter called <spanx style="verb">claims</spanx>. It can be
                used by a client with any of these to request that certain
                claims and/or particular claim values be authorized by the
                resource owner. The value of this parameter is a
                JavaScript Object Notation (JSON) object <xref target="RFC8259"
                />. This can also be used to indicate to the authorization
                server that the client considers some or all of the claims to be
                required. The client can also use this object to indicate that
                certain claim values are preferred or essential to its ability
                to operate on behalf of the resource owner.
            </t>

            <t>
                During a refresh request (as described in Section 1.5 of
                <xref target="RFC6749"/>), the <spanx style="verb">claims</spanx>
                parameter defined herein can also be used to alter the resulting
                scope of access. This can be used, for example, to lessen the
                scope by including a certain subset of claims that should be in
                the new access token. After such, a client may increase the
                scope in a subsequent refresh request by including additional
                claim names in the JSON object value of the <spanx style="verb">
                claims</spanx> authorization request parameter. When it does so,
                the client cannot, however, expand the scope from that which was
                initially authorized by the resource owner.
            </t>

            <t>
                This specification also stipulates how the authorized claim
                Names are returns from an authorization request and the result
                of introspecting a token.
            </t>

            <t>
                This specification is designed to be compatible with the OpenID
                Connect <xref target="OpenID.Core"/> but does not require the
                authorization server to support that protocol.
            </t>

            <section title="Claims vis-a-vis Scope Tokens"
                     anchor="claims-vis-a-vis-scope-tokens">
                <t>
                    As previously stated, claims relate to scope tokens. How
                    exactly is beyond the extent of this specification. Instead,
                    this document provides a framework in which these two
                    constructs can be used together or independently. That said,
                    however, there are at least three common ways that claims
                    will be used:

                    <list style="numbers">
                        <t>Not at all (in which case this specification is
                            irrelevant).</t>
                        <t>In lieu of scope tokens.</t>
                        <t>Together with scope tokens.</t>
                    </list>

                    The first and second option are straightforward. The third,
                    however, will require a specification to define the
                    relation between the two in order to achieve
                    interoperability. For instance, <xref target="OpenID.Core">
                    OpenID Connect core</xref>
                    specification relates claims to scope tokens by grouping
                    certain claims into various scope tokens. This grouping of
                    claims into various scope tokens is RECOMMENDED when
                    simultaneously using claims and scope tokens to request
                    authorization.
                </t>
            </section>

            <section title="Notational Conventions"
                     anchor="notational-conventions">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
                    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
                    "OPTIONAL" in this document are to be interpreted as described in
                    <xref target="RFC2119"/>.
                </t>

                <t>
                    Unless otherwise noted, all the protocol parameter names and
                    values are case sensitive.
                </t>
            </section>

            <section title="Terminology" anchor="terminology">
                <t>
                    This specification uses the terms "Access Token",
                    "Authorization Code", "Authorization Endpoint",
                    "Authorization Grant", "Authorization Server", "Client",
                    "Grant Type", "Redirection URI",
                    "Refresh Token", "Resource Owner", "Resource Server",
                    and "Token Endpoint" defined by <xref target="RFC6749"/>;
                    "Claim", "Claim Name", and "Claim Value" defined by
                    <xref target="RFC7519"/>; and the following defined herein:

                    <list style="hanging">
                        <t hangText="Claims Sink">
                            <vspace/>
                            The location or destination where the authorization
                            server MAY include all requested claims that are
                            authorized by the resource owner. An acccess token
                            intended for an unspecified resource server or an
                            access token the client intends to send to a
                            particular resource server or an ID token (when the
                            OpenID Connect profile of this specification is
                            used) are examples of claims sinks.
                        </t>
                        <t hangText="Claims Request Object">
                            <vspace/>
                            Has the meaning ascribed to it in <xref
                                target="claims-request-object"/>.
                        </t>

                        <t hangText="Claims Sink Query Object">
                            <vspace/>
                            Has the meaning ascribed to it in <xref
                                target="requesting-particular-claim-names-and-claim-values"/>.
                        </t>

                        <t hangText="Claim Value Query Object">
                            <vspace/>
                            Has the meaning ascribed to it in <xref
                                target="requesting-particular-claim-names-and-claim-values"/>.
                        </t>

                        <t hangText="Critical Claim">
                            <vspace/>
                            Has the meaning ascribed to it in <xref
                                target="critical-members-of-a-claims-request-object"/>.
                        </t>

                        <t hangText="Essential Claim">
                            <vspace/>
                            A claim specified by the client as being necessary
                            to ensure a smooth authorization experience for a
                            specific task requested by the resource owner.
                        </t>

                        <t hangText="Scope Token">
                            <vspace/>
                            A case-sensitive string joined by spaces together
                            with other such strings and included in the the
                            <spanx style="verb">scope</spanx> request parameter
                            of an authorization request (i.e., a
                            <spanx style="verb">scope-token</spanx> as set
                            forth in the ABNF of Section 3.3 of
                            <xref target="RFC6749"/>).
                        </t>

                        <t hangText="Voluntary Claim">
                            <vspace/>
                            A claim specified by the client as being useful but
                            not essential for the specific task requested by
                            the resource owner.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Protocol Flow" anchor="protocol-flow">
            <section title="Authorization Request" anchor="authorization-request">
               <t>
                   When a client requests authorization from the resource owner
                   indirectly via the authorization server, the protocol flow
                   MAY include a query for certain claims. Based on the policy
                   of the authorization server and the delegated access of the
                   resource owner, certain claims MAY be granted. Given an
                   authorization grant, the authorization server informs the
                   client as to which claims were actually issued (if different
                   from those requested). This message exchange pattern is
                   shown in
                   <xref target="authorization-request-protocol-flow"/>:
               </t>

                <figure title="Protocol Flow that Includes Requested and
                    Granted Claims" anchor="authorization-request-protocol-flow">
                    <artwork type="ascii-art"><![CDATA[
+--------+                               +---------------+
| Client |--(A)- Authorization request ->| Authorization |
|        |     including claims request  |    Server     |
|        |              parameter        |               |
|        |                               |               |
|        |<-(B)-- Authorization grant ---|               |
|        |                               |               |
|        |--(C)-- Authorization grant -->|               |
|        |                               |               |
|        |<-(D)-Access token including --|               |
+--------+       granted claim names     +---------------+
]]>
                    </artwork>
                </figure>

                <t>
                    The steps in the flow illustrated in Figure 1 are generally
                    the same as those described in Section 1.2 of
                    <xref target="RFC6749"/> with a few important distinctions:

                    <list style="symbols">
                        <t>The authorization request (A) is performed
                            indirectly via the authorization server and not
                            directly to the resource owner.
                        </t>
                        <t>During the authorization request (A), the client
                            includes a claims request object as the
                            corresponding value of the
                            <spanx style="verb">claims</spanx> request
                            parameter, as described in Section <xref target="requesting-particular-claim-names-and-claim-values"/> below.
                        </t>
                        <t>After obtaining (B) and presenting the authorization
                            grant (C), the response MAY include an access token
                            and a possibly-empty list of claim names that were
                            authorized (D). If the asserted claims embodied by
                            the access token differ from those requested (A),
                            then the authorization server MUST include a list
                            of authorized claim names in the authorization
                            response (D).</t>
                    </list>
                </t>
            </section>

            <section title="Refresh Request" anchor="refresh-request">
                <t>
                    As described in Section 1.5 of <xref target="RFC6749"/> and
                    further explained in section 6 thereof, a client that was
                    issued a refresh token MAY use this to narrow the scope of
                    access for an access token. It does this by sending the
                    <spanx style="verb">scope</spanx> request parameter in step
                    (G) of Figure 2 of <xref target="RFC6749"/>. At times, the
                    client might want to be more explicit about which claims
                    should be included in the refreshed access token or about
                    where those claims should be asserted.
                </t>

                <t>
                    To address this need, this document defines an additional
                    input parameter that the client may send to the
                    authorization server when it presents a refresh token to
                    the token endpoint. This update to the flow wherein a client
                    refreshes an access token to narrow the scope of access to
                    a particular set of claims as shown in
                    <xref target="refresh-token-flow"/>.

                    <figure title="Narrowing the Scope of Access to a
                    Particular Set of Claims" anchor="refresh-token-flow">
                        <artwork type="ascii-art"><![CDATA[
+--------+                               +---------------+
| Client |--(A)----- Refresh token ----->| Authorization |
|        |     including claims request  |    Server     |
|        |              parameter        |               |
|        |                               |               |
|        |<-(B)------ Access token ------|               |
|        | including granted claim names |               |
+--------+     & optional refresh token  +---------------+
]]>
                        </artwork>
                    </figure>

                    Downscoping in this flow is achieved when the client
                    requests a subset of the claims authorized by the resource
                    owner.
                </t>

                <t>
                    The client MAY request to change the claims sink where the
                    authorized claims should be asserted using this flow. If the
                    client does so, it is RECOMMENDED that the authorization
                    server accept this change baring any policy to the contrary.
                    The client MAY also send a claim value in the claim value
                    query object(s) of the request. When it does, the
                    authorization server SHOULD consider this request when
                    asserting the claim but it MAY return an error if asserting
                    a different claim value is against its policy or exceeds the
                    authorization granted by the resource owner. If it is a
                    critical claim, the requested claim value MUST be asserted
                    or an error MUST result if the authorization server supports
                    critical claims.
                </t>

                <t>
                    There are many corner cases that can arise when implementing
                    this flow. Most stem from policy and configuration changes
                    of the authorization server which may happen between the
                    time an access token is issued and it is refreshed. Other
                    complications arise when claims are used together with scope
                    tokens. Both are beyond the scope of this specification and
                    not addressed by this memo.
                </t>
            </section>

            <section title="Token Introspection" anchor="token-introspection-response">
                <t>
                    <xref target="RFC7662"/> stipulates that the introspection
                    endpoint of an authorization server must return a JSON
                    <xref target="RFC8259"/> document representing the meta
                    information surrounding the token, including its scope. This
                    specification extends that object to include the claim names
                    that the resource owner authorized the client for. This
                    request/response interaction pattern is shown in
                    <xref target="introspection-flow"/>.

                    <figure title="Introspecting an Access Token and Obtaining Granted Claims" anchor="introspection-flow">
                        <artwork type="ascii-art"><![CDATA[
+--------+                               +---------------+
| Client |--(A)----- Access token -----> | Authorization |
|        | send to introspection endpoint|    Server     |
|        |                               |               |
|        |                               |               |
|        |<-(B)------ JSON object -------|               |
|        |    including granted claim    |               |
+--------+             names             +---------------+
]]>
                        </artwork>
                    </figure>
                </t>

                <t>
                    Using this flow, a client will be informed about the
                    authorized claim names in the same way it is informed about
                    the scope of access by way of the
                    <spanx style="verb">scope</spanx> response member.
                </t>
            </section>

            <section title="Token Exchange" anchor="token-exchange">
                <t>TBD</t>
            </section>
        </section>

        <section title="Claims Request Object" anchor="claims-request-object">
            <t>
                The <spanx style="verb">claims</spanx> request parameter value
                is a UTF-8 encoded JSON object ("Claims Request Object")
                specifying requested claims. Prior to transmission to the
                authorization server it is also form-URL-encoded as appropriate.
                The claims request object is not intended to be a mechanism that
                the client may use to instruct the authorization server to
                assert specific claims. Instead, it is a simple query language
                that a client can use to request certain claims or to specify
                that it would like the authorization server to obtain
                authorization from the resource owner for a claim, perhaps with
                a particular claim value. The claims request object provides a
                client with a more structured method of requesting the scope of
                access that the resource owner authorizes it for.
            </t>
            <t>
                The top-level members of the claims request object SHOULD
                include at least one claims sink. The only specific claims sinks
                defined by this specification are
                <spanx style="verb">access_token</spanx>,
                <spanx style="verb">*</spanx>, and
                <spanx style="verb">?</spanx>. Additionally,
                this specification also sets forth a mechanism by which a client
                may signal to the authorization server which claims it prefers
                to be included in an access token that it intends to be furnished to
                a particular resource server; this is done by using an absolute
                URI of the target service or resource as a claims sink. A claims
                request object MAY also contain the member
                <spanx style="verb">crit</spanx> to indicate parts of the
                claims request object that the authorization server MUST
                understand if the <spanx style="verb">crit</spanx> member
                itself is understood. Other members of a claims request object
                MAY be present; any that are not understood by the authorization
                server MUST be ignored.
            </t>
            <t>
                An example of a claims request object that is sent to the
                authorization server as the value of the <spanx
                style="verb">claims</spanx> request parameter provided during an
                authorization request, refresh request or token exchange
                request is shown in
                <xref target="example-claims-request-object"/>.

                <figure anchor="example-claims-request-object"
                        title="Example of a Claims Request Object">
                    <artwork>
                        <![CDATA[
{
    "access_token" : {

    }
}]]>
                    </artwork>
                </figure>

                In this non-normative example, the
                <spanx style="verb">access_token</spanx> member is the
                claims sink. It is the location where the authorization server
                MAY include any of the requested claims that the resource owner
                authorizes. If the authorization server uses the requested
                claims from a particular claims sink to derive or determine
                alternative claims which it asserts, it is RECOMMENDED to
                consider the client's request to include those alternative
                claims in the same requested claims sink.
            </t>

            <section title="Requesting Particular Claim Names and Claim Values"
                     anchor="requesting-particular-claim-names-and-claim-values">
                <t>
                    Within the claims request object, a claims sink is
                    associated with another JSON object ("Claims Sink Query
                    Object"). This object contains properties that have the name
                    of a claim which the client is requesting the authorization
                    server to assert. The possible values associated with each
                    of these is <spanx style="verb">null</spanx> or another
                    JSON object ("Claim Value Query Object").
                </t>

                <t>
                    When the value is <spanx style="verb">null</spanx>, it
                    indicates that the claim with the associated claim name is a
                    voluntary claim, and the client has no specific requirements
                    on the claim value. Conversely, when the claim value query
                    object is not <spanx style="verb">null</spanx> it is a
                    JSON object with the following properties:

                    <list hangIndent="8" style="hanging">
                        <t hangText="essential">
                            <vspace/>
                            OPTIONAL. Indicates whether the claim being
                            requested is an essential claim. If the value is
                            <spanx style="verb">true</spanx>, this indicates
                            that the claim is an essential claim. If the value
                            is <spanx style="verb">false</spanx> or if this
                            property is not include, then the claim is a
                            voluntary claim.
                        </t>

                        <t hangText="value">
                            <vspace/>
                            OPTIONAL. Requests that the claim be returned with
                            a particular value.
                        </t>

                        <t hangText="values">
                            <vspace/>
                            OPTIONAL. Requests that the claim be returned with
                            one of a set of values, with the values appearing
                            in order of preference.
                        </t>
                    </list>
                </t>

                <t>
                    The properties <spanx style="verb">value</spanx> and
                    <spanx style="verb">values</spanx> are mutually exclusive.
                    If the client sends a claim value query object with both,
                    the authorization server MUST return an error as described
                    in Section <xref target="obtaining-authorization"/> below.
                </t>

                <t>
                    By requesting essential claims, the client indicates to the
                    authorization server (who indicates to the resource owner)
                    that releasing these claims will ensure a smooth
                    authorization for the specific task requested by that
                    resource owner. If the claims are not available because the
                    resource owner did not authorize their release or they are
                    not present, the authorization server MUST NOT generate an
                    error when claims are not returned.
                </t>

                <t>
                    Other members of the claim value query object MAY be defined
                    to provide additional information about the requested
                    claims. Any members of the claims value query object that is
                    not understood by the authorization server MUST be ignored.
                </t>

                <t>
                    A non-normative example of the two possible types of values
                    for a claim value query object is shown in
                    <xref target="example-claim-value-query-object"/>.

                    <figure anchor="example-claim-value-query-object"
                            title="Example of a Claim Value Query Object">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "https://exmaple.com/claim1" : null,
        "fname" : {
            "value" : "John"
        }
    }
}]]>
                        </artwork>
                    </figure>

                    In this example, there are two claim names which the client
                    is requesting
                    <spanx style="verb">https://example.com/claim1</spanx> and
                    <spanx style="verb">fname</spanx>. The values associated
                    with these are claim value query objects. The former is a
                    simple query where the client has no preference on a
                    particular value. For this reason, the client specifies the
                    value <spanx style="verb">null</spanx>. In the later case,
                    the client has more precise needs: it desires the
                    authorization server to assert a claim value of
                    <spanx style="verb">John</spanx> for the claim name
                    <spanx style="verb">fname</spanx>. In such situations the
                    authorization server MAY issue a claim with the claim name
                    <spanx style="verb">fname</spanx> but with some other claim
                    value than <spanx style="verb">John</spanx>. Both are
                    voluntary claims.
                </t>

                <t>
                    An example of an essential claim is shown in the
                    non-normative listing of
                    <xref target="example-essential-claim-value-query"/>.

                    <figure anchor="example-essential-claim-value-query"
                            title="Example of querying for an Essential Claim">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "consentId" : {
            "essential" : true
        }
    }
}]]>
                        </artwork>
                    </figure>

                    This query indicates that the client would like the
                    authorization server to issue an access token with a scope
                    that includes a claim with the claim name <spanx
                        style="verb">consentId</spanx>. To ensure a smooth
                    authorization experience at the resource server where the
                    client will present the resulting access token, the client
                    has indicated that the <spanx style="verb">consentId</spanx>
                    claim is required, making it an essential claim.
                </t>

                <t>
                    As described above, a client may also indicate that it
                    wishes the authorization server to assert a claim having a
                    claim value that the client has some preference for. A
                    non-normative example of such a query is show in
                    <xref target="example-essential-claim-value-with-certain-value"/>.

                    <figure anchor="example-essential-claim-value-with-certain-value"
                            title="Example of querying for an Essential Claim with Certain Values">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "accountId" : {
            "values" : ["act-123", "act-456"],
            "essential" : true
        },
        "paymentId" : {
            "value" : "pid-123456",
            "essential" : true
        }
    }
}]]>
                        </artwork>
                    </figure>

                    In this example, the client is requesting that the
                    authorization server assert two essential claims: one named
                    <spanx style="verb">accountId</spanx> and another named
                    <spanx style="verb">paymentId</spanx>. In the former case,
                    the client requests that the claim value be
                    <spanx style="verb">act-123</spanx> or
                    <spanx style="verb">act-456</spanx>. In the later case, a
                    claim named <spanx style="verb">paymentId</spanx> is
                    requested by the client to have a claim value of
                    <spanx style="verb">pid-123456</spanx>. Again, the
                    authorization server MUST NOT return an error if the
                    resource owner does not authorize both of these claims or
                    if they are non-existent. This is merely a request for a
                    certain scope of access.
                </t>

                <t>
                    Another example inspired by the Revised Directive on
                    Payment Services (PSD2) is shown in the
                    non-normative listing of <xref target="psd2-example"/>.

                    <figure anchor="psd2-example"
                            title="PSD2-related Example">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "instructedAmount" : {
            "value" : {
                "amount" : 123.50,
                "currency" : "EUR"
            },
            "essential" : true
        },
        "debtorAccount/iban" : {
            "value" : "DE40100100103307118608",
            "essential" : true
        },
        "creditorName" : {
            "value" : "Merchant123",
            "essential" : true
        },
        "creditorAccount/iban" : {
            "value" : "DE02100100109307118603",
            "essential" : true
        },
        "remittanceInformationUnstructured" : {
            "value" : "Ref Number Merchant",
            "essential" : true
        }
    }
}]]>
                        </artwork>
                    </figure>

                    In this example, the client is requesting (but not forcing)
                    the authorization server to obtain authorization from the
                    resource owner for five essential claims:
                    <spanx style="verb">instructedAmount</spanx>,
                    <spanx style="verb">debtorAccount/iban</spanx>,
                    <spanx style="verb">creditorName</spanx>,
                    <spanx style="verb">creditorAccount/iban</spanx>, and
                    <spanx style="verb">remittanceInformationUnstructured</spanx>.
                    The claim value query object associated with each of these
                    claim names has a particular value the client strongly
                    prefers. One interesting case is the value of the
                    <spanx style="verb">instructedAmount</spanx> essential
                    claim; the query for the value of this claim is a JSON
                    object with two properties. The authorization server might
                    use this claims request object to obtain the resource
                    owner's consent before granting them, for instance. It
                    might also check these values against a data source before
                    asserting them. Based on the resource owner's choice or the
                    data source lookup results, the authorization server may
                    not issue the claims at all or may do so with some other
                    value. For example, the authorization server may actually
                    find that the <spanx style="verb">instructedAmount</spanx>
                    value requested exceeds its policy's allowed limit and only
                    prompt the resource owner to authorize €100.
                </t>

                <t>
                    <!-- TODO: Move to resource indicator section -->
                    Another interesting example of how structured scope of
                    access can be requested is shown in the listing of
                    <xref target="esi-example"/>.

                    <figure anchor="esi-example"
                            title="ESI-related Example">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "credentialID" : {
            "value" : "qes_eidas",
            "essential" : true
        },
        "documentDigests" : {
            "value" : {
                "hash":"sTOgwOm+474gFj0q0x1iSNspKqbcse4IeiqlDg/HW=",
                "label":"Mobile Subscription Contract"
            },
            "essential" : true
        },
        "hashAlgorithmOID" : {
            "value" : "2.16.840.1.101.3.4.2.1"
        }
    }
}]]>
                        </artwork>
                    </figure>

                    This example shows how a client may request claims defined
                    by the Electronic Signatures and Infrastructures (ESI)
                    Protocols for remote digital signature creation. Like the
                    previous example, the claims request object for the
                    <spanx style="verb">access_token</spanx> claims sink
                    includes a claim value query object for the
                    <spanx style="verb">documentDigests</spanx> claim that
                    includes a JSON object with multiple properties.
                </t>

                <t>
                    These illustrative examples hopefully impress upon the
                    reader the versatility of this query language and the
                    authorization server's prerogative to assert any claims with
                    any claim values it chooses in its sole discretion. If the
                    client's needs are stronger than preferential, it MAY use
                    the <spanx style="verb">crit</spanx> member of the
                    claims request object which the authorization server MAY
                    understand.
                </t>
            </section>

            <section title="Critical Members of a Claims Request Object" 
                     anchor="critical-members-of-a-claims-request-object">
                <t>
                    As described previously, the client can indicate to the
                    authorization server that certain claims are preferential or
                    essential to the smooth operation of the client. At times,
                    however, the client's needs are stronger and require certain
                    claims to be asserted. In such situations, the client would
                    rather the authorization server return an error than grant
                    access with different claims than those requested. This is
                    not always possible for an authorization server, however,
                    and a client MUST NOT assume that the authorization server
                    can be controlled in this manner. To know if this
                    interaction pattern in supported, the client must have a
                    priori knowledge gained by some means not defined by this
                    specification or by the presence of a <spanx style="verb">
                    true</spanx> value in the authorization server's
                    <spanx style="verb">critical_claims_supported</spanx>
                    metadata (see section
                    <xref target="authorization-server-metadata"/> below). An
                    authorization server is RECOMMENDED to support this
                    capability unless it cannot. When it does, the authorization
                    server MUST issue any claim denoted as critical or it MUST
                    return an error. The error must be
                    <spanx style="verb">invalid_claims</spanx> as described below
                    in <xref target="obtaining-authorization"/>.
                </t>

                <t>
                    A client indicates to the authorization server that it must
                    understand certain claims and be able to assert them by
                    including a list of JSON Pointers
                    <xref target="RFC6901"/>
                    associated with the <spanx style="verb">crit</spanx> member
                    of the claims request object. Each such claim that the
                    elements of this list point to is a "Critical Claim". The
                    JSON Pointers in this list MUST refer to members of the
                    claims request object and MUST NOT point to elements within
                    the list itself. If any JSON Pointer refers to an element of
                    the JSON Pointer list, the authorization server MUST return
                    an error with a code of
                    <spanx style="verb">invalid_request</spanx> if it supports
                    critical claims. When the JSON Pointers are valid, if the
                    authorization server does not understand any of the claims
                    pointed to by any of the elements of this list, the
                    authorization server MUST return an error of
                    <spanx style="verb">invalid_claims</spanx>. Likewise, if
                    the authorization server is unable to assert a critical
                    claim (and it supports critical claims), it MUST return the
                    same error. If a critical claim is requested with a certain
                    value (as in the following example), the uthorization
                    server MUST assert the claim with that exact claim value. If
                    it's not able to (e.g., because the resource owner does not
                    have an attribute with that particular value), the
                    authorization server MUST return an error with a code of
                    <spanx style="verb">invalid_claims</spanx> unless it does
                    not support critical claims.
                </t>

                <t>
                    A non-normative example of a claims request object with a
                    critical claim is shown in
                    <xref target="crit-claim-example"/>.

                    <figure anchor="crit-claim-example"
                            title="Example of a Request Containing a Critical Claim">
                        <artwork>
                            <![CDATA[
{
    "crit" : [
        "/access_token/verified_claims/verification/trust_framework/value"
    ],
    "access_token" : {
        "verified_claims" : {
            "verification" : {
                "trust_framework" : {
                    "value" : "de_aml"
                }
            }
        }
    }
}]]>
                        </artwork>
                    </figure>

                    In this example, the
                    <spanx style="verb">value</spanx> member of the
                    JSON object associated with
                    <spanx style="verb">trust_framework</spanx> must be
                    understood by the authorization server because it is
                    pointed by the element of the critical claims list. The way
                    in which the authorization server understands this
                    particular query is beyond the scope of this specification.
                    The only part of this example that is germane is the
                    <spanx style="verb">crit</spanx> member of the claims
                    request object which requires the authorization server to
                    understand and assert a particular claim value (provided it
                    understands the <spanx style="verb">crit</spanx> itself).
                    If it cannot and if it supports critical claims, it must
                    return an error.
                </t>

                <t>
                    It is not uncommon for a claim name to defined as a URI
                    containing slashes (<spanx style="verb">/</spanx>, %x2F). When such a claim is
                    critical, the escaping described in Section 3 of
                    <xref target="RFC6901"/> MUST be used, as in the
                    non-normative listing of
                    <xref target="escaped-critical-claim-example"/>.

                    <figure anchor="escaped-critical-claim-example"
                            title="Example of Escaping the JSON Pointer used to Refer to a Critical Claim with a Name Containing Slashes">
                        <artwork>
                            <![CDATA[
{
    "crit" : ["/access_token/https:~1~1example.com~1claims1"],
    "access_token" : {
        "https://exmaple.com/claim1" : null,
    }
}]]>
                        </artwork>
                    </figure>
                </t>
            </section>

            <section title="Special Claims Sinks">
                <t>
                    A client may know that it needs a particular claim; however,
                    it may not be aware which claims sink the claim should be
                    included in. The client may prefer to leave this determination
                    to the authorization server. In such cases, the client MAY
                    use the claims sink <spanx style="verb">?</spanx> (%x3F) as
                    mentioned in Section <xref target="claims-request-object"/>
                    above. This special claim sink may result in the claim being
                    issued in the access token or any other claims sink that the
                    authorization server deems appropriate. A non-normative
                    example of a claims request object indicating that a
                    particular claim be asserted in any claims sink is shown in
                    <xref target="example-any-claims-sink"/>.

                    <figure anchor="example-any-claims-sink"
                            title="Example Requesting a Claim to be Asserted in Any Claims Sink">
                        <artwork>
                            <![CDATA[
{
    "?" : {
        "https://exmaple.com/claim1" : null,
    }
}]]>
                        </artwork>
                    </figure>
                </t>

                <t>
                    Similarly, there are situations where the client wishes
                    claims to be asserted in all claims sinks the authorization
                    server supports. Rather than requiring the the client to
                    repeat its requirement for each claims sink, it MAY use the
                    special claims sink <spanx style="verb">*</spanx> (%x2A).
                    This claims sink indicates to the authorization server that
                    the client prefers all claims included in the claims request
                    object to be asserted in each claim sink that the
                    authorization server supports. The two claims request
                    objects shown in Figure
                    <xref target="example-all-claims-sink"/> and
                    <xref target="example-comparable-to-all-claims-sink"/>
                    are equivalent (if the authorization server only supports
                    the two claims sinks shown in the latter).

                    <figure anchor="example-all-claims-sink"
                            title="Example Requesting a Claim to be Asserted in All Claims Sinks">
                        <artwork>
                            <![CDATA[
{
    "*" : {
        "https://exmaple.com/claim1" : null,
    }
}]]>
                        </artwork>
                    </figure>

                    <figure anchor="example-comparable-to-all-claims-sink"
                            title="Equivalent Example of Requesting a Claim to be Asserted in All Claims Sinks">
                        <artwork>
                            <![CDATA[
{
    "access_token" : {
        "https://exmaple.com/claim1" : null,
    },
    "my-good-claims-sink" : {
        "https://exmaple.com/claim1" : null,
    }
}]]>
                        </artwork>
                    </figure>
                </t>

                <t>
                    The use of either the claims sink
                    <spanx style="verb">?</spanx> and
                    <spanx style="verb">*</spanx> with any other claims sink
                    in the same claims request object is undefined. The
                    authorization server SHOULD return an error or apply some other
                    logic not defined by this specification. The client SHOULD
                    NOT make such queries unless it has some knowledge gained a
                    priori about the authorization server's support of such a
                    query.
                </t>
            </section>
        </section>

        <section title="Obtaining Authorization"
                 anchor="obtaining-authorization">
            <t>
                As stated in Section 4 of <xref target="RFC6749"/>, a request
                for an access token requires the client to obtain authorization
                from the resource owner. As described there, this
                can be done using various grant types. To make a request for
                certain claims, the <spanx style="verb">claims</spanx> request
                parameter defined herein is used when requesting an
                authorization code, implicit, resource owner password
                credentials, or client credentials grant type. The
                <spanx style="verb">claims</spanx> request parameter MAY also
                be used with additional grant type that use the extension
                mechanism defined in Section 4.5 of <xref target="RFC6749"/>
                if so profiled by some other specification.
            </t>

            <section title="Authorization Code Grant"
                     anchor="authorization-code-grant">
                <section title="Authorization Request"
                         anchor="authorization-code-grant-authorization-request">
                    <t>
                        When a client seeks to obtain authorization using
                        the authorization code grant type defined in
                        Section 4.1 of <xref target="RFC6749"/>, the client
                        MAY include the following additional query
                        component that it sends to the authorization
                        endpoint URI:

                        <list hangIndent="8" style="hanging">
                                <t hangText="claims">
                                    <vspace/>
                                    OPTIONAL. A claims request object as
                                    described in
                                    <xref target="claims-request-object"/>.
                                </t>
                        </list>

                        The value of this parameter must use the
                        <spanx style="verb">application/x-www-form-urlencoded</spanx>
                        format defined in Appendix B of
                        <xref target="RFC6749"/>.
                    </t>
                </section>

                <section title="Error Response"
                         anchor="authorization-code-grant-error-response">
                    <t>
                        If the authorization server understands the
                        <spanx style="verb">claims</spanx> request
                        parameter, it MUST
                        redirect the user-agent of the resource owner to
                        the client's redirection endpoint as described in
                        Section 4.1.2.1 of <xref target="RFC6749"/> with
                        one of the following
                        <spanx style="verb">error</spanx> values:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims_not_supported">
                                <vspace/>
                                The authorization server understands but does not support
                                the <spanx style="verb">claims</spanx>
                                request parameter, and the client SHOULD
                                NOT use it when requesting authorization.
                            </t>

                            <t hangText="invalid_request">
                                <vspace/>
                                The authorization server MAY use this
                                less-descriptive error code to indicate that
                                the claims request parameter value is not
                                accepted. It is, however, RECOMMENDED that the
                                authorization server return
                                <spanx style="verb">claims_not_supported</spanx>
                                or <spanx style="verb">invalid_claims</spanx> as
                                appropriate.
                            </t>

                            <t hangText="invalid_claims">
                                <vspace/>
                                When a client makes a request for a critical
                                claim, and the authorization server cannot
                                assert such a claim because it is invalid,
                                unknown, or malformed, this error results. If
                                the request includes only claim names in the
                                claims request object which are disallowed
                                according to the authorization server's policy,
                                this error (or the less-descriptive alternative,
                                <spanx style="verb">invalid_request</spanx>)
                                MUST result.
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Access Token Response"
                         anchor="authorization-code-grant-access-token-response">
                    <t>
                        In a non-error case, the authorization server MAY
                        include details about the claims that the client
                        is authorized for. This is done by augmenting the
                        response defined in Section 4.1.4 of
                        <xref target="RFC6749"/>. In particular, the
                        authorization server MAY include the following
                        response member in the JSON object returned from
                        the token endpoint:

                        <list style="hanging" hangIndent="8">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL, if identical to the claims
                                requested by the client; otherwise,
                                REQUIRED. The space-separated claim names
                                granted by the resource owner which denote
                                the scope of the access token.
                            </t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Implicit Flow" anchor="implicit-flow">
                <section title="Authorization Request"
                         anchor="implicit-flow-authorization-request">
                    <t>
                        When a client seeks to obtain authorization using
                        the implicit grant type defined in Section 4.2 of
                        <xref target="RFC6749"/>, the client MAY include
                        the following additional query component that it
                        sends to the authorization endpoint URI:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL. A claims request object as
                                described in
                                <xref target="claims-request-object"/>.
                            </t>
                        </list>

                        The value of this parameter must use the
                        <spanx style="verb">application/x-www-form-urlencoded</spanx>
                        format defined in Appendix B of
                        <xref target="RFC6749"/>.
                    </t>
                </section>

                <section title="Access Token Response"
                         anchor="implicit-flow-authorization-response">
                    <t>
                        In a non-error case, the authorization server MAY
                        include details about the claims that the client is
                        authorized for. This is done by augmenting the
                        response defined in Section 4.2.2 of
                        <xref target="RFC6749"/>. In particular, the
                        authorization server MAY include the following
                        response parameter included on the fragment
                        component of the redirection URI:

                        <list style="hanging" hangIndent="8">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL, if identical to the claims
                                requested by the client; otherwise,
                                REQUIRED. The space-separated claim names
                                granted by the resource owner which denote
                                the scope of the access token.
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Error Response"
                         anchor="implicit-flow-error-response">
                    <t>
                        If the authorization server understands the
                        <spanx style="verb">claims</spanx> request
                        parameter, it MUST
                        redirect the user-agent of the resource owner to
                        the client's redirection URI as described in
                        Section 4.2.2.1 of <xref target="RFC6749"/> with
                        one of the following
                        <spanx style="verb">error</spanx> values:

                        <list style="hanging" hangIndent="8">
                            <t hangText="claims_not_supported">
                                <vspace/>
                                The authorization server understands but does not support
                                the <spanx style="verb">claims</spanx>
                                request parameter, and the client SHOULD
                                NOT use it when requesting authorization.
                            </t>

                            <t hangText="invalid_request">
                                <vspace/>
                                The authorization server MAY use this
                                less-descriptive error code to indicate that the
                                claims request parameter value is not accepted.
                                It is, however, RECOMMENDED that the
                                authorization server return
                                <spanx style="verb">claims_not_supported</spanx>
                                or <spanx style="verb">invalid_claims</spanx> as
                                appropriate.
                            </t>

                            <t hangText="invalid_claims">
                                <vspace/>
                                When a client makes a request for a critical
                                claim, and the authorization server cannot
                                assert such a claim because it is invalid,
                                unknown, or malformed, this error results. If
                                the request includes only claim names in the
                                claims request object which are disallowed
                                according to the authorization server's policy,
                                this error (or the less-descriptive alternative,
                                <spanx style="verb">invalid_request</spanx>)
                                MUST result.
                            </t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Resource Owner Password Credentials Grant"
                     anchor="resource-owner-password-credentials-grant">
                <section title="Access Token Request"
                         anchor="ropc-access-token-request">
                    <t>
                        When a client seeks to obtain authorization using
                        the resource owner password credentials grant type
                        defined in Section 4.3 of <xref target="RFC6749"/>,
                        the client MAY include the following additional
                        parameter using the
                        <spanx style="verb">application/x-www-form-urlencoded</spanx>
                        format per Appendix B of <xref target="RFC6749"/>
                        with a character encoding of UTF-8 in the HTTP
                        request entity-body:

                        <list style="hanging" hangIndent="8">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL. A claims request object as
                                described in
                                <xref target="claims-request-object"/>.
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Access Token Response"
                         anchor="ropc-access-token-response">
                    <t>
                        In a non-error case, the authorization server MAY
                        include details about the claims that the client is
                        authorized for. This is done by augmenting the
                        response defined in Section 4.3.3 of
                        <xref target="RFC6749"/>. In particular, the
                        authorization server MAY include the following
                        response member in the JSON object returned from
                        the token endpoint:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL, if identical to the claims
                                requested by the client; otherwise,
                                REQUIRED. The space-separated claim names
                                the client is authorized for which denote
                                the scope of the access token.
                            </t>
                        </list>

                        If the request is invalid due to the value
                        of the <spanx style="verb">claims</spanx>
                        parameter, the authorization server returns an
                        error with one of the following error codes:

                        <list style="hanging" hangIndent="8">
                            <t hangText="claims_not_supported">
                                <vspace/>
                                The authorization server understands but does not support
                                the <spanx style="verb">claims</spanx>
                                request parameter, and the client SHOULD
                                NOT use it when requesting an access token.
                            </t>

                            <t hangText="invalid_request">
                                <vspace/>
                                The authorization server MAY use this
                                less-descriptive error code to indicate that
                                the claims request parameter value is not
                                accepted. It is, however, RECOMMENDED that the
                                authorization server return
                                <spanx style="verb">claims_not_supported</spanx>
                                or <spanx style="verb">invalid_claims</spanx> as
                                appropriate.
                            </t>

                            <t hangText="invalid_claims">
                                <vspace/>
                                When a client makes a request for a critical
                                claim, and the authorization server cannot
                                assert such a claim because it is invalid,
                                unknown, or malformed, this error results. If
                                the request includes only claim names in the
                                claims request object which are disallowed
                                according to the authorization server's policy,
                                this error (or the less-descriptive alternative,
                                <spanx style="verb">invalid_request</spanx>)
                                MUST result.
                            </t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Client Credentials Grant"
                     anchor="client-credentials-grant">
                <section title="Access Token Request"
                         anchor="cc-access-token-request">
                    <t>
                        When a client seeks to obtain authorization using
                        the client credentials grant type defined in
                        Section 4.4 of <xref target="RFC6749"/>, the client
                        MAY include the following additional parameter
                        using the
                        <spanx style="verb">application/x-www-form-urlencoded</spanx>
                        format per Appendix B of <xref target="RFC6749"/>
                        with a character encoding of UTF-8 in the HTTP
                        request entity-body:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL. A claims request object as
                                described in  <xref
                                    target="claims-request-object"/>.
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Access Token Response"
                         anchor="cc-access-token-response">
                    <t>
                        In a non-error case, the authorization server MAY
                        include details about the claims that the client
                        is authorized for. This is done by augmenting the
                        response defined in Section 4.4.3 of
                        <xref target="RFC6749"/>. In particular, the
                        authorization server MAY include the following
                        response member in the JSON object returned from
                        the token endpoint:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL, if identical to the claims
                                requested by the client; otherwise,
                                REQUIRED. The space-separated claim names
                                the client is authorized for which denote
                                the scope of the access token.
                            </t>
                        </list>

                        If the request is invalid due to the
                        value of the <spanx style="verb">claims</spanx>
                        parameter, the authorization server returns an
                        error with one of the following error codes:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims_not_supported">
                                <vspace/>
                                The authorization server understands but does not support
                                the <spanx style="verb">claims</spanx>
                                request parameter, and the client SHOULD
                                NOT use it when requesting an access token.
                            </t>

                            <t hangText="invalid_request">
                                <vspace/>
                                The authorization server MAY use this
                                less-descriptive error code to indicate that
                                the claims request parameter value is not
                                accepted. It is, however, RECOMMENDED that the
                                authorization server return
                                <spanx style="verb">claims_not_supported</spanx>
                                or <spanx style="verb">invalid_claims</spanx> as
                                appropriate.
                            </t>

                            <t hangText="invalid_claims">
                                <vspace/>
                                When a client makes a request for a critical
                                claim, and the authorization server cannot
                                assert such a claim because it is invalid,
                                unknown, or malformed, this error results. If
                                the request includes only claim names in the
                                claims request object which are disallowed
                                according to the authorization server's policy,
                                this error (or the less-descriptive alternative,
                                <spanx style="verb">invalid_request</spanx>)
                                MUST result.
                            </t>
                        </list>
                    </t>
                </section>
            </section>
        </section>

        <section title="Token Refresh" anchor="token-refresh">
            <t>
                As defined in Section 6 of <xref target="RFC6749"/>, a client
                may be provided with a refresh token. When it is, it can
                present this to the token endpoint of the authorization server
                in a refresh request. This specification extends the
                request and response of this flow as described in the following
                subsections.

                <section title="Token Refresh Request">
                    <t>
                        When performing a token refresh request, the client MAY
                        send the following parameter using the
                        <spanx style="verb">application/x-www-form-urlencoded</spanx>
                        format per Appendix B of <xref target="RFC6749"/> with
                        a character encoding of UTF-8 in the HTTP request
                        entity-body:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL. A claims request object as described in
                                <xref target="claims-request-object"/>.
                            </t>
                        </list>

                        If the client includes a claims request object in the
                        request, it SHOULD ensure that the claim names in the
                        claims value query object(s) are ones that were authorized
                        by the resource owner. It can do this by remember what
                        was originally requested and/or from the authorization
                        server's response to its authorization request which
                        will include the list of claim names if they differ from
                        those originally requested.
                    </t>
                </section>

                <section title="Access Refresh Response"
                         anchor="refresh-access-token-response">
                    <t>
                        In a non-error case, the authorization server MAY
                        include details about the claims that the client
                        is authorized for. This is done by augmenting the
                        response defined in Section 5.1 of
                        <xref target="RFC6749"/>. In particular, the
                        authorization server MAY include the following
                        response member in the JSON object returned from
                        the token endpoint:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims">
                                <vspace/>
                                OPTIONAL, if identical to the claims
                                requested by the client; otherwise,
                                REQUIRED. The space-separated claim names
                                the client is authorized for which denote
                                the scope of the access token.
                            </t>
                        </list>

                        If the request is invalid due to the value of the
                        value of the <spanx style="verb">claims</spanx>
                        parameter, the authorization server returns an
                        error with one of the following error codes:

                        <list hangIndent="8" style="hanging">
                            <t hangText="claims_not_supported">
                                <vspace/>
                                The authorization server understands but does not support
                                the <spanx style="verb">claims</spanx>
                                request parameter, and the client SHOULD
                                NOT use it when requesting an access token.
                            </t>

                            <t hangText="invalid_request">
                                <vspace/>
                                The authorization server MAY use this
                                less-descriptive error code to indicate that
                                the claims request parameter value is not
                                accepted. It is, however, RECOMMENDED that the
                                authorization server return
                                <spanx style="verb">claims_not_supported</spanx>
                                or <spanx style="verb">invalid_claims</spanx> as
                                appropriate.
                            </t>

                            <t hangText="invalid_claims">
                                <vspace/>
                                When a client makes a request for a critical
                                claim, and the authorization server cannot
                                assert such a claim because it is invalid,
                                unknown, or malformed, this error results. If
                                the request includes only claim names in the
                                claims request object which are disallowed
                                according to the authorization server's policy,
                                this error (or the less-descriptive alternative,
                                <spanx style="verb">invalid_request</spanx>)
                                MUST result.
                            </t>
                        </list>
                    </t>
                </section>
            </t>
        </section>

        <section title="Token Exchange" anchor="token-exhange">
            <t>TBD</t>
        </section>

        <section title="Token Introspection" anchor="token-introspection">
            <t>
                This specification defines an additional top-level member in
                the JSON <xref target="RFC8259"/> object of the authorization
                server's introspection endpoint response as stipulated in
                Section 2.2 of <xref target="RFC7662"/>.

                <list hangIndent="8" style="hanging">
                    <t hangText="claims">
                        <vspace/>
                        OPTIONAL. The space-separated claim names granted by the resource
                        owner which denote the scope of the access token.
                    </t>
                </list>
            </t>
        </section>

        <section title="Requesting Claims for a Particular Protected Resource">
            <t>TBD</t>
        </section>

        <section title="Authorization Server Metadata" anchor="authorization-server-metadata">
            <t>
                An authorization server that supports the
                <spanx style="verb">claims</spanx> request parameter SHOULD
                declare this fact by including the following property in the
                authorization server metadata response
                <xref target="RFC8414"/>:

                <list style="hanging">
                    <t hangText="claims_parameter_supported">
                        <vspace/>
                        OPTIONAL. A boolean value indicating that the
                        authorization server supports the
                        <spanx style="verb">claims</spanx> request parameter or
                        not. A value of <spanx style="verb">true</spanx>
                        indicates that it is supported. A value of
                        <spanx style="verb">false</spanx>, a
                        <spanx style="verb">null</spanx> value, or the absence
                        of the property means that the
                        <spanx style="verb">claims</spanx> request parameter is
                        not supported by the authorization server.
                    </t>

                    <t hangText="critical_claims_supported">
                        <vspace/>
                        OPTIONAL. A boolean value indicating that the
                        authorization server supports the possibility for the
                        client to indicate that certain parts of a claims
                        request object MUST be understood by the authorization
                        server. A value of <spanx style="verb">false</spanx>,
                        a <spanx style="verb">null</spanx> value, or the
                        absence of this member means that the authorization
                        server MAY not support this interaction pattern, and
                        the client MUST NOT assume that it does.
                    </t>
                </list>

                If the authorization server returns a value of
                <spanx style="verb">false</spanx> for
                <spanx style="verb">claims_parameter_supported</spanx> and
                true for <spanx style="verb">critical_claims_supported</spanx>,
                the interpretation by the client is undefined. It is
                RECOMMENDED that the client assume that the authorization
                server is misconfigured and that it not attempt to request
                claims in a manner defined by this specification.
            </t>

            <t>
                A non-normative example of an authorization server metadata
                response which indicates that the
                <spanx style="verb">claims</spanx> request parameter and
                critical claims are supported by the server is shown in
                <xref target="authorization-server-metadata-example"/>.

                <figure anchor="authorization-server-metadata-example"
                        title="Example of Metadata of an Authorization Server
                        that Supports the Claims Request Parameter and
                        Critical Claims">
                    <artwork>
                        <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
    "issuer" :
        "https://server.example.com",
    "authorization_endpoint" :
        "https://server.example.com/authorize",
    "token_endpoint" :
        "https://server.example.com/token",
    "token_endpoint_auth_methods_supported" :
        ["client_secret_basic", "private_key_jwt"],
    "token_endpoint_auth_signing_alg_values_supported" :
        ["RS256", "ES256"],
    "userinfo_endpoint" :
        "https://server.example.com/userinfo",
    "jwks_uri" :
        "https://server.example.com/jwks.json",
    "registration_endpoint" :
        "https://server.example.com/register",
    "scopes_supported" :
        ["openid", "profile", "email", "address", "phone",
         "offline_access"],
    "response_types_supported" :
        ["code", "code token"],
    "service_documentation" :
        "http://server.example.com/service_documentation.html",
    "ui_locales_supported" :
        ["en-US", "en-GB", "en-CA", "fr-FR", "fr-CA"],
    "claims_parameter_supported" : true,
    "critical_claims_supported" : true
}]]>
                    </artwork>
                </figure>

                Note the last two members in particular.
            </t>
        </section>

        <section title="Security Considerations" anchor="security-considerations">
            <t>TBD</t>
        </section>

        <section title="Privacy Considerations" anchor="privacy-considerations">
            <t>TBD</t>
        </section>

        <section title="IANA Considerations" anchor="iana-considerations">
            <t>TBD</t>
        </section>
    </middle>

    <back>
        <references title="Normative References">
            <reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
                <front>
                    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
                    <author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
                    <date year='1997' month='March' />
                    <abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
                </front>
                <seriesInfo name='BCP' value='14'/>
                <seriesInfo name='RFC' value='2119'/>
                <seriesInfo name='DOI' value='10.17487/RFC2119'/>
            </reference>
            <reference anchor='RFC6749' target='https://www.rfc-editor.org/info/rfc6749'>
                <front>
                    <title>The OAuth 2.0 Authorization Framework</title>
                    <author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'>
                        <organization/>
                    </author>
                    <date year='2012' month='October'/>
                    <abstract>
                        <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited
                            access to an HTTP service, either on behalf of a resource owner by orchestrating an approval
                            interaction between the resource owner and the HTTP service, or by allowing the third-party
                            application to obtain access on its own behalf. This specification replaces and obsoletes
                            the OAuth 1.0 protocol described in RFC 5849. [STANDARDS-TRACK]
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='6749'/>
                <seriesInfo name='DOI' value='10.17487/RFC6749'/>
            </reference>
            <reference anchor='RFC6901' target='https://www.rfc-editor.org/info/rfc6901'>
                <front>
                    <title>JavaScript Object Notation (JSON) Pointer</title>
                    <author initials='P.' surname='Bryan' fullname='P. Bryan' role='editor'><organization /></author>
                    <author initials='K.' surname='Zyp' fullname='K. Zyp'><organization /></author>
                    <author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
                    <date year='2013' month='April' />
                    <abstract><t>JSON Pointer defines a string syntax for identifying a specific value within a JavaScript Object Notation (JSON) document.</t></abstract>
                </front>
                <seriesInfo name='RFC' value='6901'/>
                <seriesInfo name='DOI' value='10.17487/RFC6901'/>
            </reference>
            <reference anchor='RFC7519' target='https://www.rfc-editor.org/info/rfc7519'>
                <front>
                    <title>JSON Web Token (JWT)</title>
                    <author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
                    <author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
                    <author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
                    <date year='2015' month='May' />
                    <abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
                </front>
                <seriesInfo name='RFC' value='7519'/>
                <seriesInfo name='DOI' value='10.17487/RFC7519'/>
            </reference>
            <reference anchor='RFC7662' target='https://www.rfc-editor.org/info/rfc7662'>
                <front>
                    <title>OAuth 2.0 Token Introspection</title>
                    <author initials='J.' surname='Richer' fullname='J. Richer' role='editor'><organization /></author>
                    <date year='2015' month='October' />
                    <abstract><t>This specification defines a method for a protected resource to query an OAuth 2.0 authorization server to determine the active state of an OAuth 2.0 token and to determine meta-information about this token. OAuth 2.0 deployments can use this method to convey information about the authorization context of the token from the authorization server to the protected resource.</t></abstract>
                </front>
                <seriesInfo name='RFC' value='7662'/>
                <seriesInfo name='DOI' value='10.17487/RFC7662'/>
            </reference>
            <reference anchor='RFC8259' target='https://www.rfc-editor.org/info/rfc8259'>
                <front>
                    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
                    <author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
                    <date year='2017' month='December' />
                    <abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
                </front>
                <seriesInfo name='STD' value='90'/>
                <seriesInfo name='RFC' value='8259'/>
                <seriesInfo name='DOI' value='10.17487/RFC8259'/>
            </reference>
            <reference anchor='RFC8414' target='https://www.rfc-editor.org/info/rfc8414'>
                <front>
                    <title>OAuth 2.0 Authorization Server Metadata</title>
                    <author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
                    <author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
                    <author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
                    <date year='2018' month='June' />
                    <abstract><t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t></abstract>
                </front>
                <seriesInfo name='RFC' value='8414'/>
                <seriesInfo name='DOI' value='10.17487/RFC8414'/>
            </reference>

<!--            <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters">-->
<!--                <front>-->
<!--                    <title>OAuth Parameters</title>-->
<!--                    <author>-->
<!--                        <organization>IANA</organization>-->
<!--                    </author>-->
<!--                    <date/>-->
<!--                </front>-->
<!--            </reference>-->
        </references>

        <references title="Informative References">
            <reference anchor="OpenID.Core" target="http://openid.net/specs/openid-connect-core-1_0.html">
                <front>
                    <title>OpenID Connect Core 1.0</title>

                    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
                        <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
                    </author>

                    <author fullname="John Bradley" initials="J." surname="Bradley">
                        <organization abbrev="Ping Identity">Ping Identity</organization>
                    </author>

                    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
                        <organization abbrev="Microsoft">Microsoft</organization>
                    </author>

                    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
                        <organization abbrev="Google">Google</organization>
                    </author>

                    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
                        <organization abbrev="Salesforce">Salesforce</organization>
                    </author>

                    <date day="25" month="February" year="2014"/>
                </front>

                <seriesInfo name="OpenID Foundation" value="Standards" />
            </reference>

            <reference anchor='I-D.ietf-oauth-token-exchange'>
                <front>
                    <title>OAuth 2.0 Token Exchange</title>

                    <author initials='M' surname='Jones' fullname='Michael Jones'>
                        <organization />
                    </author>

                    <author initials='A' surname='Nadalin' fullname='Anthony Nadalin'>
                        <organization />
                    </author>

                    <author initials='B' surname='Campbell' fullname='Brian Campbell'>
                        <organization />
                    </author>

                    <author initials='J' surname='Bradley' fullname='John Bradley'>
                        <organization />
                    </author>

                    <author initials='C' surname='Mortimore' fullname='Chuck Mortimore'>
                        <organization />
                    </author>

                    <date month='July' day='21' year='2019' />
                </front>

                <seriesInfo name='Internet-Draft'
                            value='draft-ietf-oauth-token-exchange-19' />

                <format type='TXT'
                        target='http://www.ietf.org/internet-drafts/draft-ietf-oauth-token-exchange-19.txt' />
            </reference>
        </references>

        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>
                The following individuals contributed ideas, feedback, and wording to this specification:
            </t>

            <t>
                Mark Dobrinic, Jacob Ideskog
            </t>
        </section>

        <section title="Document History" anchor="document-history">
            <?rfc subcompact="yes"?>
            <t>
                [[ to be removed by the RFC editor before publication as an RFC ]]
            </t>
            <t>
                -00
                <list style='symbols'>
                    <t>
                        Initial draft.
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>