<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">

<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc tocompact="yes"?>

<rfc ipr="trust200902" category="std" docName="draft-ideskog-assisted-token-00">
    <front>
        <title abbrev="Assisted Token">OAuth 2.0 Assisted Token</title>

        <author fullname="Jacob Ideskog" initials="J." surname="Ideskog">
            <organization>Curity AB</organization>

            <address>
                <email>jacob@curity.io</email>
            </address>
        </author>

        <author fullname="Travis Spencer" initials="T." surname="Spencer">
            <organization>Curity AB</organization>

            <address>
                <email>travis@curity.io</email>
                <uri>http://travisspencer.com/</uri>
            </address>
        </author>

        <date day="19" month="January" year="2018"/>

        <area>Security</area>
        <workgroup>OAuth Working Group</workgroup>

        <keyword>OAuth</keyword>
        <keyword>JavaScript</keyword>
        <keyword>SPA</keyword>
        <keyword>Single Page Application</keyword>

        <abstract>
            <t>
                The OAuth 2.0 authorization flow for Single Page Applications (SPAs), often referred to as the assisted
                token flow, enables OAuth clients to request user authorization written in scripting languages, like
                JavaScript, with a simplified integration compared to the implicit grant type flow. Communication does
                not rely on redirection of the user agent, but instead leverages HTML's iframe element and postMessage
                interface. This communication is done using an additional endpoint, the assisted token endpoint, which
                this document defines.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction" anchor="introduction">
            <t>
                This OAuth 2.0 protocol flow for Single-page Applications (SPA), often referred to as the assisted token
                flow, provides clients written in scripting languages, like JavaScript, with a simplified integration
                (compared to the implicit grant type flow) and ensures that end users are not redirected away from the
                current page in order to obtain authorization from the resource owner. The communication between the
                client and the authorization server takes place within an HTML iframe element that is only displayed
                when interactive user interaction is required; this is the case when authentication and/or authorization
                are necessary. To communicate the result from this iframe to the client application, HTML's postMessage
                interface is used instead of the redirection endpoint defined in Section 3.1.2 of
                <xref format="title" target="RFC6749"/>. This difference is important for many SPAs which take time to
                reload and may not be able to recreate the same state prior to the user being redirected to the
                authorization server.
            </t>

            <t>
                Another goal of the assisted token flow is to simply integration of the client and the authorization
                server. Though <xref target="RFC6749"/> resulted in a much simpler integration for client applications
                compared to its predecessor, <xref target="RFC5849"/>, developers still struggle with the many inputs
                required to perform the various OAuth flows. For this reason, the assisted token flow introduces a new
                endpoint called the assisted token endpoint rather than extending and reusing the token endpoint
                defined in Section 3.2 of<xref target="RFC6749"/>. As a result, client developers do not need to specify
                a response_type parameter in the authorization request. This coupled with the use of a dynamic iframe
                and HTML's postMessage interface for communication between the client and the authorization server means
                that redirect_uri and state parameter are also unnecessary. Consequently, client developers only need
                to provide a client_id and handle the postMessage that fired by the authorization server in order to
                implement OAuth.
            </t>

            <t>This interaction is shown in <xref target="assisted-token-flow"/>.</t>

            <figure title="Assisted Token Flow" anchor="assisted-token-flow">
                <artwork type="ascii-art"><![CDATA[
+----------------------------+                      +---------------+
|           Client           |                      | Authorization |
| +--------------------------+                      |     Server    |
| |              +-----------+                      |               |
| |--(A)-------->|           |--(B)-- Client ------>|               |
| |              |           |        Identifier    |               |
| |              |  Hidden   |                      |               |
| |              |  iframe   |<-(C)-- HTML with ----|               |
| |<-(D)- Token -|           |        postMessage   |               |
| |       or     |           |        including     |               |
| |       error  +-----------+        access token  |               |
| +--------------------------+        or error      |               |
|                            |                      |               |
+----------------------------+                      +---------------+
]]>
                </artwork>
            </figure>

            <t>
                The assisted token flow illustrated in <xref target="assisted-token-flow"/> includes the following steps:

                <list style="empty">
                    <t>(A) The client creates a hidden iframe element using a scripting language like JavaScript. The
                        src attribute of this iframe is the URL of the assisted token endpoint of the authorization server.</t>

                    <t>(B) The query string of the src attribute on the iframe includes, at a minimum, the client
                        identifier.</t>

                    <t>(C) If the user is already logged in and has granted consent to the client, the authorization
                        server immediately returns an HTML document that includes a script that is executing; this
                        fires an event which is communicated to the client using an HTML window.postMessage.</t>

                    <t>(D) The client handles this event -- the payload of which is either an access token or an error;
                        the client then closes the dynamic iframe without revealing it to the user.</t>
                </list>
            </t>
            
            <t>
                If the resource owner has not authenticated or has not authorized the client, then interaction between
                the resource owner and the authorization server is required to obtain these. In such a case, the HTML in
                step (C) of <xref target="assisted-token-flow"/> will include an error indicating that user
                involvement is required. This will be handled by the client in step (D) and login and/or consent will
                commence. This process is illustrated in <xref target="assisted-token-login-consent-flow"/>.
            </t>

            <figure title="Assisted Token Login and/or Consent Flow" anchor="assisted-token-login-consent-flow">
                <artwork type="ascii-art"><![CDATA[
+----------------------------+                      +---------------+
|           Client           |                      | Authorization |
| +--------------------------+                      |     Server    |
| |              +-----------+        Client        |               |
| |--(A)-------->|           |--(B)-- Identifier -->|               |
| |              |           |                      |               |
| |              |  Visible  |--(C)-- User -------->|               |
| |              |  iframe   |        authenticates |               |
| |<-(E)- Token -|           |                      |               |
| |              |           |<-(D)-- HTML with ----|               |
| |              +-----------+        postMessage   |               |
| +--------------------------+        including     |               |
|                            |        access token  |               |
+----------------------------+                      +---------------+
]]>
                </artwork>
            </figure>

            <t>
                The flow shown in <xref target="assisted-token-login-consent-flow"/> includes the following steps:

                <list style="empty">
                    <t>(A) The client creates a <spanx>visible</spanx> iframe after receiving an indication from the
                        authorization server that user interaction is required.As in the previous flow, the src
                        attribute of this iframe is the URL of the authorization server's assisted token endpoint.</t>

                    <t>(B) The query string of the src attribute of the visible iframe includes, at a minimum, the
                        client identifier.</t>

                    <t>(C) The authorization server prompts the resource owner to authenticate and/or authorize the
                        client.</t>

                    <t>(D) The authorization server returns an HTML document that includes a script that is executing;
                        this fires an event which is communicated to the client using an HTML window.postMessage.</t>

                    <t>(E) The client handles this event -- the payload of which is an access token; the client then
                        closes the iframe that it previously opened to facilitate user interaction.</t>
                </list>
            </t>
        </section>

        <section title="Terminology" anchor="terminology">
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
                "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in Key
                words for use in RFCs to Indicate Requirement Levels <xref target='RFC2119'/>.
            </t>

            <t>
                <list style='hanging'>
                    <t hangText="Handle Token">
                        <vspace/>
                        An opaque token that refers to internal data of the authorization server (e.g., the user
                        ID, scope of the token, etc.) as described in Section 3.1 of <xref target="RFC6819"/>.
                    </t>
                </list>
            </t>
            <t>
                All other terms used in this document are as defined in <xref target="RFC6749"/>. Unless otherwise
                noted, all the protocol parameter names and values are case sensitive.
            </t>
        </section>

        <section title="Assisted Token Endpoint" anchor="assisted-token-endpoint">

            <t>MUST BE PRE_REGISTERED</t>

            <section anchor="cross-orgin-suport" title="Cross-Origin Support">
                <t>
                    The assisted token endpoint MAY support CORS <xref target="W3C.WD-cors-20120403"/>.
                </t>
            </section>
        </section>

        <section title="Protocol" anchor="protocol">
            <t>(A) The client opens a hidden iframe and makes the initial GET request passing the client_id as the only
                required parameter. The GET request is made by setting the "src" parameter in the iframe with the full
                URL to the assisted endpoint including the client_id parameter.

                (B) If the Authorization Server can determine that the user has an SSO session, it issues an Access
                Token and shows a page.

                (C) The page runs JavaScript onLoad that sends a message using postMessage with the result to the parent
                frame.

                To force the non interactive flow above the client MAY send the "prompt=none" query string argument
                along with the client_id. This forces the Authorization Server as well as any Authentication Service to
                no prompt the user.

                If the user is not logged in, an error SHOULD be returned. If the error contains
                "user_authentication_required", then the client can restart the flow in a visible frame. See the
                Interactive Flow.

                (A) The client opens a visible iframe and makes the initial GET request passing the client_id as the
                only required parameter. The GET request is made by setting the "src" parameter in the iframe with the
                full URL to the assisted endpoint including the client_id parameter.

                (B) The Authorization Server hands over to an authenticating party that interacts with the user for
                Authentication.

                (C) The Authorization server issues the Access Token and shows a page.

                (D) The page runs JavaScript onLoad that sends a message using postMessage with the result to the parent
                frame.

                After (D) the client closes the iframe and the flow is complete. The
            </t>

            <section title="Assisted Token Request" anchor="assisted-token-request">
                <t>The assisted token request is an HTTP GET request constructed by the client with the following
                    parameters provided on the query string:
                </t>

                <t>
                    <list hangIndent="8" style="hanging">
                        <t hangText="client_id">
                            REQUIRED. The client identifier as described in Section 2.2 of<xref target="RFC6749"/>.
                        </t>

                        <t hangText="for_origin">
                            OPTIONAL. The origin of the client in case multiple allowed origins are
                            configured with the authorization server and support for user agents that do not support
                            <xref target="CSP-2"/> but only X-Frame-Options <xref target="RFC7034"/>. See Section
                            <xref target="framing"/> for details.
                        </t>

                        <t hangText="prompt">
                            OPTIONAL. Space delimited, case sensitive list of ASCII string values that can be used to
                            determine the login state of the resource owner at the authorization server. The defined
                            values are:
                            <list style="hanging">
                                <t hangText="none">
                                    The authorization server MUST NOT display any authentication or consent user
                                    interface pages. An error is returned if the user is not already authenticated or if
                                    the client has not received consent (either explicitly by the resource owner or by
                                    the authorization server's configuration of the client) or if the authorization
                                    server cannot fulfill other conditions for processing. This can be used as a method
                                    to probing for existing authentication and/or consent.
                                </t>

                                <t hangText="login">
                                    Regardless of the current user authentication state, the authorization server
                                    SHOULD prompt the user to authenticate. If it cannot, it MUST return an error.
                                </t>

                                <t hangText="consent">
                                    The authorization server SHOULD prompt the user for consent before returning
                                    information to the client. If it cannot obtain consent, it MUST return an error.
                                </t>
                            </list>

                            Other values may be provided in this list; the authorization server MUST ignore them
                            without producing an error if it cannot understand them.
                        </t>

                        <t hangText="scope">
                            OPTIONAL. The scope of the access request as described in <xref target="access-token-scope"/>.
                        </t>
                    </list>
                </t>
            </section>

            <section title="Assisted Token Response" anchor="assisted-token-response">
                <t>The response is a postMessage sent from the page on the Authorization Server in the iframe, to the
                    client in
                    the parent frame. This post message is a JSON object with the following parameters
                    Successful Response

                    access_token REQUIRED

                    scope REQUIRED only if the server changes the scopes from the default.

                    expires_in REQUIRED the number of seconds until the access_token expires.
                </t>
            </section>

            <section title="Error Response" anchor="error-response">
                <t>error REQUIRED an error code as defined in RFC6749#4.2.2.1 with the following addition

                    user_interaction_required
                    The user is required to interact with the flow in some way. This could be to grant consent, or to
                    authenticate.

                    error_description OPTIONAL Human-readable ASCII [USASCII] text providing additional information,
                    used to
                    assist the client developer in understanding the error that occurred.
                </t>
            </section>

            <section title="Access Token Scope" anchor="access-token-scope"/>
        </section>

        <section title="Client Metadata" anchor="client-metadata">
            <t>
                The authorization server MAY allow dynamic clients to request the use of the assisted token flow when
                registering. Such a client may indicate that it will interact with the authorization server using the
                assisted token flow by including the string element
                "urn:ietf:params:oauth:grant-type:assisted_token" in the array associated with the "grant_types"
                metadata field sent to the client registration endpoint (as defined in Section 3. of
                <xref target="RFC7591"/>). If the authorization server allows the client to register with this grant
                type, the "grant_types" included in the response MUST include the value
                "urn:ietf:params:oauth:grant-type:assisted_token".
            </t>
            <t>
                The inclusion of this value in the "grant_types" field is done despite the fact that the client will
                not use this grant type at the token endpoint but rather the <xref target="assisted-token-endpoint">
                assisted token endpoint</xref>.
            </t>
        </section>

        <section title="Authorization Server Metadata" anchor="authorization-server-metadata">
            <t>
                Support for the assisted token flow MUST be declared in the OAuth 2.0 Authorization Server Metadata
                <xref target="I-D.ietf-oauth-discovery"/> with the following metadata:
            </t>
            <t>
                <list style="hanging">
                    <t hangText="assisted_token_endpoint">
                        <vspace/>
                        OPTIONAL.
                        URL of the authorization server's assisted token endpoint defined in
                        <xref target="assisted-token-endpoint"/>.
                    </t>
                    <t hangText="grant_types_supported">
                        <vspace/>
                        OPTIONAL.
                        A JSON array specified in Section 2. of
                        <xref target="I-D.ietf-oauth-discovery"/>
                        which should contain the value "urn:ietf:params:oauth:grant-type:assisted_token" as defined in
                        <xref target="client-metadata"/>.
                    </t>
                </list>
            </t>
        </section>

        <section title="IANA Considerations" anchor="iana-considerations">
            <section anchor="URIReg" title="OAuth URI Registration">
                <t>
                    This specification registers the following values in the IANA "OAuth URI" registry
                    <xref target="IANA.OAuth.Parameters"/> established by<xref target="RFC6755"/>.
                </t>

                <section title="Registry Contents" anchor="URIContents">
                    <t>
                        <?rfc subcompact="yes"?>
                        <list style="symbols">
                            <t>URN: urn:ietf:params:oauth:grant-type:assisted_token</t>
                            <t>Common Name: Assisted token flow grant type for OAuth 2.0</t>
                            <t>Change controller: IESG</t>
                            <t>Specification Document:<xref target="client-metadata"/>of [[ this specification ]]</t>
                        </list>
                    </t>

                    <?rfc subcompact="no"?>
                </section>
            </section>

            <!--<section anchor="ErrorReg" title="OAuth Extensions Error Registration">
                <t>
                    This specification registers the following values in the
                    IANA "OAuth Extensions Error Registry" registry
                    <xref target="IANA.OAuth.Parameters"/>
                    established by<xref target="RFC6749"/>.
                </t>

                <section title="Registry Contents" anchor="ErrorContents">
                    <t>
                        <?rfc subcompact="yes"?>
                        <list style="symbols">
                            <t>Error name: authorization_pending</t>
                            <t>Error usage location: Token endpoint response</t>
                            <t>Related protocol extension: [[ this specification ]]</t>
                            <t>Change controller: IETF</t>
                            <t>Specification Document: <xref target="error-response"/> of [[ this specification ]]</t>
                        </list>
                    </t>
                </section>
            </section>-->

            <section title="OAuth 2.0 Authorization Server Metadata" anchor="MetadataReg">

                <t>
                    This specification registers the following values in the IANA "OAuth 2.0 Authorization Server
                    Metadata" registry <xref target="IANA.OAuth.Parameters"/> established by
                    <xref target="I-D.ietf-oauth-discovery"/>.
                </t>

                <section title="Registry Contents" anchor="MetadataContents">
                    <t>
                        <?rfc subcompact="yes"?>
                        <list style="symbols">
                            <t>Metadata name: assisted_token_endpoint</t>
                            <t>Metadata Description: The Assisted Token Endpoint.</t>
                            <t>Change controller: IESG</t>
                            <t>Specification Document: <xref target="authorization-server-metadata"/>
                                of [[ this specification ]]</t>
                        </list>
                    </t>

                    <?rfc subcompact="no"?>
                </section>
            </section>
        </section>

        <section title="Security Considerations" anchor="security-considerations">
            <t>
                In addition to all <xref target="RFC6819"> the security considerations discussed in OAuth 2.0
                </xref>, the following security considerations SHOULD be taken into account.
            </t>

            <section title="Framing" anchor="framing">
                <t>
                    Due to the use of an iframe to host the assisted token endpoint, the authorization server MUST take
                    precautions to ensure that only trusted origins are allowed to frame it. The authorization server
                    MUST prevent any origin from framing the assisted token endpoint except ones that an administrator
                    has explicitly allowed. It may do this in any manner that is available to the application.
                </t>

                <t>
                    One such mechanism that MAY be deployed is <xref target="CSP-2">Content Security Policy</xref>. This
                    protocol SHOULD be used on the assisted token endpoint (and, if applicable, other endpoints used to
                    authenticated the user in a specific deployment) to prevent framing from unauthorized origins. Using
                    CSP allows the authorization server to specify multiple origins in a single response header field
                    and to constrain these using flexible patterns (see <xref target="CSP-2"/> for details). This
                    standard provides a robust mechanism for protecting against click-jacking when combining policies
                    that restrict "child-src" which script source are allowed to execute using "script-src" policies.
                </t>
                <t>
                    Because some user agents do not support <xref target="CSP-2"/>, this technique SHOULD be combined with
                    others. In particular, the authorization server SHOULD return an "X-Frame-Options" response header
                    on the assisted token endpoint (and, if applicable, other endpoints used to authenticate the user
                    in a specific deployment). As defined in <xref target="RFC7034"/>, this header will cause user
                    agents that support this header (but not CSP) to block framing from any origin that is not
                    specified in this header's value. Because this header's value can only include one origin, the
                    framer should use the "for_origin" parameter (as specified in
                    <xref target="assisted-token-request"/>) to include its own origin.
                </t>

                <t>
                    Some user agents do not support <xref target="RFC7034">X-Frame-Options</xref> nor
                    <xref target="CSP-2"/>. Therefore, the authorization server SHOULD include a frame-busting script
                    like that shown in Figure 7 of <xref target="FRAME-BUSTING"/>. Such a script would use JavaScript
                    to break out of any unauthorized origin that is framing the assisted token endpoint. The
                    authorization server MAY simply break out of all frames in case <xref target="RFC7034">
                    X-Frame-Options</xref> and<xref target="CSP-2"/> are unsupported by the user agent, though this
                    would render the assisted token flow non-functional. The choice of whether or not this drastic
                    countermeasure should be employed depends on the user agents being targetted in a certain
                    deployment.
                </t>
            </section>

            <section title="Handle Tokens" anchor="handle-token">
                <t>
                    Because the client applications that use the assisted token flow are written in scripting languages
                    like JavaScript and are hosted in Web pages, users may keep such applications open in their user
                    agents for a prolonged period of time. During such period, the token issued to the client may
                    expire. To ensure that such expired tokens left remnant in the user agent are benign, a Handle
                    Token SHOULD always be issued by the assisted token endpoint. This ensures that no identity data
                    is exposed (even when the token is not yet expired) and that an unrevoked token does not increase
                    risks.
                </t>
            </section>

            <section title="Warning Against Untrusted Scripts" anchor="warning-against-untrusted-script">
                <t>
                    As admitted in Section 8 of <xref target="RFC6454"/>, preventing exfiltration of cookies, tokens,
                    and other such credentials in web browsers has historically proven difficult to implement. Instead,
                    the same-origin policy has emerged as the cornerstone of security for such user agents. Using this
                    security model, it is not possible to prevent access to a token issued to a client if that client
                    includes nefarious scripts from untrustworthy sources that have access to the Document Object
                    Model (DOM) where the token is stored. For this reason, the authorization server MUST warn client
                    application developers who interact with the assisted token endpoint <spanx>not</spanx> to use
                    untrusted scripts in their applications. This warning SHOULD at least be conveyed through the
                    documentation but MAY also be provided through other mechanisms.
                </t>
            </section>

            <section title="Origin of Event and Authorization Server" anchor="origin-of-event-and-authorization-server">
                <t>
                    As described in <xref target="assisted-token-request"/>, the authorization server will return an
                    access token to the client using HTML's postMessage interface. The receiver of this message is
                    provided with an event object that contains an origin property. A client application MUST compare
                    this with that of the authorization server before consuming the message. Otherwise, it runs the
                    risk of processing messages posted from untrusted origins. An example of a proper message handler
                    is shown in the following JavaScript listing:
                </t>
                <figure anchor="f_arwmwmrm" title="Comparing the origin of the postMessage event with that of the authorization server">
                    <artwork>
                        <![CDATA[
<script type="text/javascript">
    window.addEventListener("message", function(evt) {
        if (evt.origin !== "https://oauth-server.example.com")
            return; // Ignore event from untrusted source

        ...
    }, false);
</script>]]>
                    </artwork>
                </figure>
            </section>

            <section title="Token Storage" anchor="token-storage">
                <t>
                    Most client applications that use the assisted token flow will maintain the access token issued by
                    the authorization server in a persisted state; this will commonly be an HTTP cookie or local
                    storage. This is necessary, for instance, to create a pleasing user experience when a user navigates
                    away from the application in their web browser and then returns. To ensure that the token is stored
                    safely, the authorization server MAY provide application developers with guidance in the
                    accompanying documentation on how to safely persist tokens. The authorization server MAY also
                    provide script libraries that perform this action according to best common practices. The
                    authorization server MAY also store the token in an HTTP cookie in its own DNS domain (rather than
                    that of the client) using the assisted token endpoint's path. This would elevate any storage
                    requirements from the client application developer. Besides simplifying the programming model for
                    developers, this technique allows the authorization server to check the validity of the token and
                    determine if the token has expired or if the associated grant has been revoked in subsequent
                    requests to the assisted token endpoint; this will be possible because the requests will include
                    the token in the HTTP Cookie request header. In such cases, the authorization server can take the
                    appropriate action, such as authenticating the user anew or request consent, before issuing a new
                    token. If the token is stored by the application, however, this kind of verification cannot be
                    performed by the authorization server without an explicit request to validate a stored token.
                </t>
            </section>
        </section>

        <section anchor="privacy-considerations" title="Privacy Considerations">
            <t>
                In some deployments, the assisted token endpoint may be served from a distinct domain from that of the
                client. In such cases, the client will be a third-party domain, and the resource owner's user agent may
                prevent the authorization server from storing any third-party cookies. If the authorization server
                requires state to be persisted when performing the assisted token flow, it SHOULD
                provide a privacy-preserving mechanism to store and retrieve its state even when the assisted token
                endpoint is hosted on a distinct domain from that of the client. The technical details of how to
                accomplish this are implementation specific, and are beyond the scope of this specification. If the
                authorization server does not support clients that are hosted from a third-party domain, it MUST
                indicate this to the client through some mechanism (e.g., its associated documentation).
            </t>
        </section>
    </middle>

    <back>
        <references title="Normative References">
            <!-- Get these from https://xml2rfc.tools.ietf.org/public/rfc/bibxml/. In-line them rather than use
            xml2rfc's PIs, so that other XML applications (e.g., Intellij and Firefox) can validate the document -->

            <reference anchor='RFC5849' target='https://www.rfc-editor.org/info/rfc5849'>
                <front>
                    <title>The OAuth 1.0 Protocol</title>
                    <author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav' role='editor'>
                        <organization/>
                    </author>
                    <date year='2010' month='April'/>
                    <abstract>
                        <t>OAuth provides a method for clients to access server resources on behalf of a resource owner
                            (such as a different client or an end-user). It also provides a process for end-users to
                            authorize third-party access to their server resources without sharing their credentials
                            (typically, a username and password pair), using user-agent redirections. This document is
                            not an Internet Standards Track specification; it is published for informational purposes.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='5849'/>
                <seriesInfo name='DOI' value='10.17487/RFC5849'/>
            </reference>

            <reference anchor='I-D.ietf-oauth-discovery'>
                <front>
                    <title>OAuth 2.0 Authorization Server Metadata</title>

                    <author initials='M' surname='Jones' fullname='Michael Jones'/>
                    <author initials='N' surname='Sakimura' fullname='Nat Sakimura'/>
                    <author initials='J' surname='Bradley' fullname='John Bradley'/>

                    <date month='November' day='15' year='2017'/>

                    <abstract>
                        <t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the
                            information needed to interact with an OAuth 2.0 authorization server, including its
                            endpoint locations and authorization server capabilities.
                        </t>
                    </abstract>
                </front>

                <seriesInfo name='Internet-Draft' value='draft-ietf-oauth-discovery-08'/>
                <format type='TXT'
                        target='http://www.ietf.org/internet-drafts/draft-ietf-oauth-discovery-08.txt'/>
            </reference>
            <reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
                <front>
                    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
                    <author initials='S.' surname='Bradner' fullname='S. Bradner'>
                        <organization/>
                    </author>
                    <date year='1997' month='March'/>
                    <abstract>
                        <t>In many standards track documents several words are used to signify the requirements in the
                            specification. These words are often capitalized. This document defines these words as they
                            should be interpreted in IETF documents. This document specifies an Internet Best Current
                            Practices for the Internet Community, and requests discussion and suggestions for
                            improvements.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='BCP' value='14'/>
                <seriesInfo name='RFC' value='2119'/>
                <seriesInfo name='DOI' value='10.17487/RFC2119'/>
            </reference>
            <reference anchor='RFC6749' target='https://www.rfc-editor.org/info/rfc6749'>
                <front>
                    <title>The OAuth 2.0 Authorization Framework</title>
                    <author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'>
                        <organization/>
                    </author>
                    <date year='2012' month='October'/>
                    <abstract>
                        <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited
                            access to an HTTP service, either on behalf of a resource owner by orchestrating an approval
                            interaction between the resource owner and the HTTP service, or by allowing the third-party
                            application to obtain access on its own behalf. This specification replaces and obsoletes
                            the OAuth 1.0 protocol described in RFC 5849. [STANDARDS-TRACK]
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='6749'/>
                <seriesInfo name='DOI' value='10.17487/RFC6749'/>
            </reference>
            <reference anchor='RFC7591' target='https://www.rfc-editor.org/info/rfc7591'>
                <front>
                    <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
                    <author initials='J.' surname='Richer' fullname='J. Richer' role='editor'/>
                    <author initials='M.' surname='Jones' fullname='M. Jones'/>
                    <author initials='J.' surname='Bradley' fullname='J. Bradley'/>
                    <author initials='M.' surname='Machulak' fullname='M. Machulak'/>
                    <author initials='P.' surname='Hunt' fullname='P. Hunt'/>
                    <date year='2015' month='July'/>
                    <abstract>
                        <t>This specification defines mechanisms for dynamically registering OAuth 2.0 clients with
                            authorization servers. Registration requests send a set of desired client metadata values to
                            the authorization server. The resulting registration responses return a client identifier to
                            use at the authorization server and the client metadata values registered for the client.
                            The client can then use this registration information to communicate with the authorization
                            server using the OAuth 2.0 protocol. This specification also defines a set of common client
                            metadata fields and values for clients to use during registration.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='7591'/>
                <seriesInfo name='DOI' value='10.17487/RFC7591'/>
            </reference>
            <reference anchor='RFC6755' target='https://www.rfc-editor.org/info/rfc6755'>
                <front>
                    <title>An IETF URN Sub-Namespace for OAuth</title>
                    <author initials='B.' surname='Campbell' fullname='B. Campbell'/>
                    <author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'/>
                    <date year='2012' month='October'/>
                    <abstract>
                        <t>
                            This document establishes an IETF URN Sub-namespace for use with OAuth-related
                            specifications. This document is not an Internet Standards Track specification; it is
                            published for informational purposes.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='6755'/>
                <seriesInfo name='DOI' value='10.17487/RFC6755'/>
            </reference>
            <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters">
                <front>
                    <title>OAuth Parameters</title>
                    <author>
                        <organization>IANA</organization>
                    </author>
                    <date/>
                </front>
            </reference>
        </references>

        <references title="Informative References">
            <reference anchor='W3C.WD-cors-20120403'
                       target='http://www.w3.org/TR/2012/WD-cors-20120403'>
                <front>
                    <title>Cross-Origin Resource Sharing</title>
                    <author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'/>
                    <date month='April' day='3' year='2012' />
                </front>

                <seriesInfo name='World Wide Web Consortium LastCall' value='WD-cors-20120403' />
                <format type='HTML' target='http://www.w3.org/TR/2012/WD-cors-20120403' />
            </reference>
            <reference anchor='RFC6454' target='https://www.rfc-editor.org/info/rfc6454'>
                <front>
                    <title>The Web Origin Concept</title>
                    <author initials='A.' surname='Barth' fullname='A. Barth'>
                        <organization/>
                    </author>
                    <date year='2011' month='December'/>
                    <abstract>
                        <t>This document defines the concept of an &quot;origin&quot;, which is often used as the scope
                            of authority or privilege by user agents. Typically, user agents isolate content retrieved
                            from different origins to prevent malicious web site operators from interfering with the
                            operation of benign web sites. In addition to outlining the principles that underlie the
                            concept of origin, this document details how to determine the origin of a URI and how to
                            serialize an origin into a string. It also defines an HTTP header field, named &quot;Origin&quot;,
                            that indicates which origins are associated with an HTTP request. [STANDARDS-TRACK]
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='6454'/>
                <seriesInfo name='DOI' value='10.17487/RFC6454'/>
            </reference>
            <reference anchor="FRAME-BUSTING" target="http://seclab.stanford.edu/websec/framebusting/">
                <front>
                    <title>Busting frame busting: a study of clickjacking vulnerabilities at popular sites</title>
                    <author initials="G." surname="Rydstedt">
                        <organization>Stanford Web Security Research</organization>
                    </author>
                    <author initials="E." surname="Bursztein">
                        <organization>Stanford Web Security Research</organization>
                    </author>
                    <author initials="D." surname="Boneh">
                        <organization>Stanford Web Security Research</organization>
                    </author>
                    <author initials="C." surname="Jackson">
                        <organization>Stanford Web Security Research</organization>
                    </author>
                    <date year="2010" month="July"/>
                </front>
            </reference>
            <reference anchor='RFC6819' target='https://www.rfc-editor.org/info/rfc6819'>
                <front>
                    <title>OAuth 2.0 Threat Model and Security Considerations</title>
                    <author initials='T.' surname='Lodderstedt' fullname='T. Lodderstedt' role='editor'/>
                    <author initials='M.' surname='McGloin' fullname='M. McGloin'/>
                    <author initials='P.' surname='Hunt' fullname='P. Hunt'/>
                    <date year='2013' month='January'/>
                    <abstract>
                        <t>This document gives additional security considerations for OAuth, beyond those in the OAuth
                            2.0 specification, based on a comprehensive threat model for the OAuth 2.0 protocol. This
                            document is not an Internet Standards Track specification; it is published for informational
                            purposes.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='6819'/>
                <seriesInfo name='DOI' value='10.17487/RFC6819'/>
            </reference>
            <reference target="https://www.w3.org/TR/CSP2" anchor="CSP-2">
                <front>
                    <title>Content Security Policy Level 2</title>
                    <author initials="M." surname="West"/>
                    <author initials="A." surname="Barth"/>
                    <author initials="D." surname="Veditz"/>
                    <date month="July" year="2015"/>
                </front>
            </reference>
            <reference anchor='RFC7034' target='https://www.rfc-editor.org/info/rfc7034'>
                <front>
                    <title>HTTP Header Field X-Frame-Options</title>
                    <author initials='D.' surname='Ross' fullname='D. Ross'>
                        <organization/>
                    </author>
                    <author initials='T.' surname='Gondrom' fullname='T. Gondrom'>
                        <organization/>
                    </author>
                    <date year='2013' month='October'/>
                    <abstract>
                        <t>To improve the protection of web applications against clickjacking, this document describes
                            the X-Frame-Options HTTP header field, which declares a policy, communicated from the server
                            to the client browser, regarding whether the browser may display the transmitted content in
                            frames that are part of other web pages.
                        </t>
                    </abstract>
                </front>
                <seriesInfo name='RFC' value='7034'/>
                <seriesInfo name='DOI' value='10.17487/RFC7034'/>
            </reference>
        </references>

        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>
                The following individuals contributed ideas, feedback, and wording to this specification:
            </t>

            <t>
                Mark Dobrinic
            </t>
        </section>

        <section title="Document History" anchor="document-history">
            <?rfc subcompact="yes"?>
            <t>
                [[ to be removed by the RFC editor before publication as an RFC ]]
            </t>
            <t>
                -00
                <list style='symbols'>
                    <t>
                        Initial draft.
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>